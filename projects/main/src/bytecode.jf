import main.ir
import main.ast
import main.prelude

adt ValueRef
	Instr(instr:Instruction)
	ConstNum(val:i32, type:IRType)
	ConstString(val:string, type:IRType)
	ConstBool(val:bool, type:IRType)
	ConstUnit
	Undef(type:IRType)
end

adt MaybeValueRef
	Nothing
	Just(val:ValueRef)
end

adt WritableReference
	Variable(var_:Variable)
	Global(global_:IRGlobalDecl)
	ArrayIndex(value:ValueRef, index:ValueRef, type:IRType)
	ADTField(value:ValueRef, field_:IRADTField)
end

adt IndexableRef
	Symbol(symbol:IRSymbol)
	Value(val:ValueRef)
end

adt CallableRef
	Function(fun:IRFunctionDecl)
	ADTConstructor(cons:IRADTCons)
end

adt DebugLoc
	None
	At(source:SourceFileRef, loc:SrcLoc)
end

adt FunctionFrame
	New
	
	field vars:VariableList
	
	field entry:BasicBlock
	field blocks:BasicBlockList
end


adt Variable
	Parameter(param:IRParam)
	Var(name:string)
	Temporary(name:string)

	field type:IRType
	field dbg:DebugLoc
end

adt VariableList
	Nil
	Cons(var_:Variable, tail:VariableList)
end

adt BasicBlockList
	Nil
	Cons(block:BasicBlock, tail:BasicBlockList)
end

adt BasicBlock
	New
	
	field instructions:Instruction[]
	field size:i32
	field capacity:i32
	
	field llvmRef:pointer
end

adt PHIList
	Nil
	Cons(bb:BasicBlock, value:ValueRef, tail:PHIList)
end

adt ArithOp
	Plus
	Minus
	Divide
	Multiply
end

adt Comparison
	EQ
	NE
	LE
	LT
	GE
	GT
end

adt Intrinsic
	Arith(op:ArithOp)
	CompareBool(op:Comparison)
	CompareI32(op:Comparison)
	CompareString(op:Comparison)
	ComparePointer(op:Comparison)
	CompareRefEq(op:Comparison)
	StringConcat
	NewArray(elTy:IRType)
end

adt ADTJumpCase
	Nil
	Cons(cons:IRADTCons, bb:BasicBlock, tail:ADTJumpCase)
end

adt Instruction
	WriteVariable(var_:Variable, value:ValueRef)
	ReadVariable(var_:Variable)
	CallConstructor(cons:IRADTCons, args:ValueRefList)
	CallFunction(fun:IRFunctionDecl, args:ValueRefList)
	CallIntrinsic(intrinsic:Intrinsic, args:ValueRefList)
	ReadGlobal(global_:IRGlobalDecl)
	WriteGlobal(global_:IRGlobalDecl, value:ValueRef)
	PHI(phi:PHIList)
	
	ArrayRead(array:ValueRef, idx:ValueRef)
	ArrayWrite(array:ValueRef, idx:ValueRef, value:ValueRef)
	
	ADTExtract(owner:ValueRef, cons:IRADTCons, param:IRParam)	
	ReadADTField(owner:ValueRef, field_:IRADTField)
	WriteADTField(owner:ValueRef, field_:IRADTField, value:ValueRef)
	
	Unreachable
	Jump(target:BasicBlock)
	CondJump(val:ValueRef, ifTrue:BasicBlock, ifFalse:BasicBlock)
	ADTJump(val:ValueRef, adt_:IRADTDecl, branches:ADTJumpCase, def:BasicBlock)
	Return (ref:ValueRef)
	
	field dbg:DebugLoc
	field type:IRType
	field value:ValueRef
	
	field llvmRef:pointer
end

adt ValueRefList
	Nil
	Cons(ref:ValueRef, tail:ValueRefList)
end

function FunctionFrameCreate():FunctionFrame
	var frame = FunctionFrame.New
	frame.vars = VariableList.Nil
	frame.blocks = BasicBlockList.Nil
	frame.entry = BasicBlockCreate(frame)
	return frame
end

adt Coerce
	None
	FromUndef
	ID
end

function FunctionFrameAddVar(frame:FunctionFrame, var_:Variable)
	frame.vars = VariableList.Cons(var_, frame.vars)
end

function BasicBlockCreate(frame:FunctionFrame):BasicBlock
	var bb = BasicBlock.New
	bb.size = 0
	bb.capacity = 0
	frame.blocks = BasicBlockList.Cons(bb, frame.blocks)
	return bb
end

function WritableReferenceGetType(ref:WritableReference):IRType
	match ref
	case Variable(var_)
		return var_.type
	case Global(global_)
		return global_.type.type
	case ADTField(owner, field_)
		return field_.type.type
	case ArrayIndex(array, idx, type)
		return type
	end
end

function ValueRefGetType(value:ValueRef):IRType
	match value
	case Instr(instr)
		return instr.type
	case ConstNum(num, ty)
		return ty
	case ConstString(str, ty)
		return ty
	case ConstUnit
		return IRType.Prim(IRPrimType.Unit)
	case ConstBool(b, ty)
		return ty
	case Undef(ty)
		return ty
	end
end

function CallableRefGetType(value:CallableRef):IRType
	match value
	case Function(fun)
		return fun.type
	case ADTConstructor(cons)
		return cons.type
	end
end

function BasicBlockEmit(bb:BasicBlock, instr:Instruction)
	if bb.capacity == bb.size then
		var newCapacity = bb.capacity * 2 + 1
		var arr = new Instruction[newCapacity]
		var i = 0
		while i < bb.size do
			arr[i] = bb.instructions[i]
			i = i + 1
		end
		bb.capacity = newCapacity
		bb.instructions = arr
	end
	
	bb.instructions[bb.size] = instr
	bb.size = bb.size + 1
end
