import main.bytecode
import main.ir
import main.compiler
import main.ast
import core.prelude
import main.bytecode_builder
import main.ast_stmt
import main.ast_expr
import main.ast_type

import main.ir_builder
import main.ir_compiler

adt BCCompiler
	New
	
	field context:CompilerContext
	field file:IRSourceFile
	
	field retTy:IRType
	field frame:FunctionFrame
	field builder:BCBuilder
	
	field irBuilder:IRBuilder
	field irCompiler:IRCompiler
	
	field scope:Scope
end

adt ScopeBinding
	Nil
	Binding(name:string, ref:LocalRef, next:ScopeBinding)
end

adt Termination
	Always
	Maybe
	Never
end

function TerminationConcat(first:Termination, second:Termination):Termination
	match first
	case Always return first
	case Maybe
		match second
		case Always return second
		case Maybe return second
		case Never return first
		end
	case Never return second
	end
end

function TerminationChoice(left:Termination, right:Termination):Termination
	match left
	case Always 
		match right
		case Always
			return right
		case Maybe
			return right
		case Never
			return Termination.Maybe
		end
	case Maybe
		return left
	case Never 
		match right
		case Always
			return Termination.Maybe
		case Maybe
			return right
		case Never
			return right
		end
	end
end

adt Scope
	New
	
	field termination:Termination
	
	field parent:Scope
	field binding:ScopeBinding
end

adt MaybeScope
	Nothing
	Just(value:Scope)
end

adt LocalRef
	Value(value:ValueRef)
	Variable(var_:Variable)
	Global(symbol:IRSymbol)
end

adt MaybeLocalRef
	Nothing
	Just(val:LocalRef)
end

function BCCompile(context:CompilerContext)
	BCCompileUnits(context, context.units)
end

function ScopeConcat(first:Scope, second:Scope)
	first.termination = TerminationConcat(first.termination, second.termination)
end

function ScopeChoice(left:Scope, right:Scope)
	left.termination = TerminationChoice(left.termination, right.termination)
end

function BCCompileUnits(context:CompilerContext, units:IRCompilationUnitList)
	var units = context.units
	while true do
		match units
		case Nil 
			return
		case Cons(unit_, tail)
			BCCompileUnit(context, unit_)
			units = tail
		end
	end
end

function BCCompileUnit(context:CompilerContext, unit_:IRCompilationUnit)
	var files = unit_.files
	while true do
		match files
		case Nil
			return
		case Cons(file, tail)
			BCCompileFile(context, file)
			files = tail			
		end
	end
end

function BCCompileFile(context:CompilerContext, file:IRSourceFile)
	var compiler = BCCompilerCreate(context, file)
	
	BCCompileSymbols(compiler, file.symbols)
end


function BCCompilerCreate(context:CompilerContext, file:IRSourceFile):BCCompiler
	var bc:BCCompiler = BCCompiler.New
	bc.context = context
	bc.file = file
	bc.builder = BCBuilderCreate()
	bc.irBuilder = IRBuilderCreate(context)
	bc.irBuilder.file = file
	bc.irCompiler = IRCompilerCreate(context, file)
	
	--create root scope
	var scope = Scope.New
	scope.parent = scope
	scope.binding = ScopeBinding.Nil
	bc.scope = scope
	
	return bc
end

function BCCompileSymbols(bc:BCCompiler, symbols:IRSymbolList)
	while true do
		match symbols
		case Nil return
		case Cons(symbol, tail)
			BCompileSymbol(bc, symbol)
			symbols = tail
		end
	end
end

function BCCompilerError(compiler:BCCompiler, loc:SrcLoc, message:string):undef
	match loc
	case At(line, col)
		WriteLn(compiler.file.file.path + "(line " + IntToStr(line + 1) + ", col " + IntToStr(col + 1) + "): BCCompiler Error: " + message)
	end
	Exit(1)
end


function BCompileSymbol(bc:BCCompiler, symbol:IRSymbol)
	match symbol
	case ADT(adt_)
		--do nothing for adt yet
	case Global(global_)
		BCCompileGlobal(bc, global_)
	case Function(fun)
		BCCompileFunction(bc, fun)
	end
end

function BCCompileFunction(bc:BCCompiler, fun:IRFunctionDecl)
	match fun.body
	case Block(block)		
		BCEnterFuction(bc, fun)	

		var frame = FunctionFrameCreate()
		block.frame = frame
		BCEnterFrame(bc, frame)		
		
		var scope = BCCompilerEnterScope(bc)
		
		BCInjectParameters(bc, fun, frame)
		
		BCCompileCode(bc, block.ast)
		BCCompilerLeaveScope(bc)	
		BCLeaveFrame(bc)
		
		match scope.termination
		case Always 
			--do nothing
		case other
			var returningUnit = false
			match bc.retTy
			case Prim(prim)
				match prim
				case Unit
					returningUnit = true
				end
			end

			if returningUnit then
				BCBuilderReturn(bc.builder, ValueRef.ConstUnit)
			else
				BCCompilerError(bc, fun.symbol.loc, "control reaches the end of non-unit function")
			end
		end
		
		
		
		BCLeaveFunction(bc)
	end
end

function BCCompileGlobal(bc:BCCompiler, global_:IRGlobalDecl)
	bc.retTy = global_.type.type
	
	var frame = FunctionFrameCreate()
	global_.expr.frame = frame
	BCEnterFrame(bc, frame)		
	
	var scope = BCCompilerEnterScope(bc)
	
	var val = BCCompileExprAs(bc, global_.expr.ast, global_.type.type)
	BCBuilderReturn(bc.builder, val)
	
	BCCompilerLeaveScope(bc)	
	BCLeaveFrame(bc)	
end

function BCEnterFuction(bc:BCCompiler, fun:IRFunctionDecl)
	bc.retTy = fun.retTy.type
end

function BCLeaveFunction(bc:BCCompiler)
	
end


function BCEnterFrame(bc:BCCompiler, frame:FunctionFrame)
	--no nested frames yet!
	bc.frame = frame
	BCBuilderSetInsertPoint(bc.builder, frame.entry)
end

function BCLeaveFrame(bc:BCCompiler)
end

function BCCompilerEnterScope(bc:BCCompiler):Scope
	var scope = Scope.New
	scope.parent = bc.scope
	scope.binding = ScopeBinding.Nil
	scope.termination = Termination.Never
	bc.scope = scope
	return scope
end

function BCCompilerLeaveScope(bc:BCCompiler):Scope
	var oldScope = bc.scope
	bc.scope = bc.scope.parent
	return oldScope
end

function BCCompilerVarInitialized(bc:BCCompiler, var_:Variable)
end

function BCInjectParameters(bc:BCCompiler, fun:IRFunctionDecl, frame:FunctionFrame)
	var params = fun.params
	while true do
		match params
		case Nil return
		case Cons(param, tail)
			var var_ = Variable.Parameter(param)
			var_.type = param.type.type
			var_.dbg = DbgLocCreate(bc, param.loc)
			FunctionFrameAddVar(frame, var_)
			params = tail
			
			BCCompilerAddScopeRef(bc, param.name, LocalRef.Variable(var_))
		end
	end
end

function BCCompilerAddScopeRef(bc:BCCompiler, name:string, ref:LocalRef)
	bc.scope.binding = ScopeBinding.Binding(name, ref, bc.scope.binding)
end

function DbgLocCreate(bc:BCCompiler, loc:SrcLoc):DebugLoc
	return DebugLoc.At(bc.file.file, loc)
end

function Loc(bc:BCCompiler, loc:SrcLoc)
	BCBuilderSetDebugLoc(bc.builder, DbgLocCreate(bc, loc))
end

function BCCompileCode(bc:BCCompiler, ast:AstStmtList)
	while true do
		match ast
		case Nil 
			return
		case Cons(stmt, tail)
			BCCompileStmt(bc, stmt)
			ast = tail			
		end
	end
end

function BCResolveType(bc:BCCompiler, ast:AstType):IRType
	var type = IRBuildType(bc.irBuilder, ast)
	type = IRCompileType(bc.irCompiler, ast.loc, type)
	return type
end

function count_cases(cases:AstCaseList):i32
	match cases
	case Nil return 0
	case Cons(case_, tail) return count_cases(tail) + 1
	end
end

function BCCompilerBindParams(bc:BCCompiler, val:ValueRef, cons:IRADTCons, patterns:AstPatternList)
	var params = cons.params
	
	while true do
		match patterns 
		case Nil
			return
		case Cons(pat, patterns_tail)
			match params
			case Nil
				BCCompilerError(bc, pat.loc, "too many patterns")
			case Cons(param, params_tail)
				match pat
				case Id(name)
					BCCompilerAddScopeRef(bc, BinderGetName(name), LocalRef.Value(BCBuilderADTExtract(bc.builder, val, cons, param)))
				case other
					BCCompilerError(bc, pat.loc, "nested patterns not supported")
				end
				patterns = patterns_tail
				params = params_tail
			end			
		end
	end
end

function BCCompilerCheckCaseCovers(bc:BCCompiler, branches:ADTJumpCase, cons:IRADTCons):bool
	while true do
		match branches
		case Nil return false
		case Cons(cons_1, block, tail)
			if cons == cons_1 then
				return true
			end
			branches = tail
		end
	end
end

function BCCompilerCheckCaseCoverageDupes(bc:BCCompiler, loc:SrcLoc, branches:ADTJumpCase)
	while true do
		match branches
		case Nil return 
		case Cons(cons, block, tail)
			if BCCompilerCheckCaseCovers(bc, tail, cons) then
				BCCompilerError(bc, loc, "duplicate case")
			end
			branches = tail
		end
	end
end

function BCCompilerCheckCaseCoverage(bc:BCCompiler, loc:SrcLoc, branches:ADTJumpCase, adt_:IRADTDecl):bool
	BCCompilerCheckCaseCoverageDupes(bc, loc, branches)
	
	var consList = adt_.cons
	while true do
		match consList
		case Nil return true
		case Cons(cons, tail)
			if BCCompilerCheckCaseCovers(bc, branches, cons) == false then
				return false
			end
			consList = tail
		end
	end
end

function BCCompileStmt(bc:BCCompiler, ast:AstStmt)
	match bc.scope.termination
	case Always
		BCCompilerError(bc, ast.loc, "dead code")
	end

	match ast 
	case Var(name, m_type, m_init)
		var varType:IRType
		var varInit:MaybeValueRef = MaybeValueRef.Nothing
		
		match m_type
		case Nothing
			match m_init
			case Nothing BCCompilerError(bc, ast.loc, "either type declaration or init expression is required")
			case Just(init)
				var val = BCCompileExprNoHint(bc, init)
				varType = ValueRefGetType(val)
				varInit = MaybeValueRef.Just(val)
			end
		case Just(astType)
			varType = BCResolveType(bc, astType)
			match m_init
			case Nothing 
				--do nothing
			case Just(init)
				varInit = MaybeValueRef.Just(BCCompileExprAs(bc, init, varType))
			end
		end
		
		var var_ = Variable.Var(BinderGetName(name))
		var_.dbg = DbgLocCreate(bc, ast.loc)
		var_.type = varType
		FunctionFrameAddVar(bc.frame, var_)
		
		BCCompilerAddScopeRef(bc, BinderGetName(name), LocalRef.Variable(var_))
		
		match varInit
		case Just(init)
			Loc(bc, ast.loc)
			BCBuilderWriteVariable(bc.builder, var_, init)
			BCCompilerVarInitialized(bc, var_)
		end
	case Eval(expr)
		var val = BCCompileExprNoHint(bc, expr)
		match ValueRefGetType(val)
		case Prim(prim)
			match prim
			case Undef
				bc.scope.termination = Termination.Always
				BCBuilderUnreachable(bc.builder)
			end
		end
	case Assign(lhs, rhs)
		var ref = BCCompileWritableReference(bc, lhs)
		var val = BCCompileExprAs(bc, rhs, WritableReferenceGetType(ref))
		
		Loc(bc, ast.loc)
		
		match ref
		case Variable(var_)
			BCBuilderWriteVariable(bc.builder, var_, val)
		case Global(global_)
			BCBuilderWriteGlobal(bc.builder, global_, val)
		case ADTField(ptr, field_)
			BCBuilderWriteADTField(bc.builder, ptr, field_, val)
		case ArrayIndex(array, idx, type)
			BCBuilderArrayWrite(bc.builder, array, idx, val)
		end
	case Match(expr, cases)
		var targetExpr = BCCompileExprNoHint(bc, expr)
		
		match ValueRefGetType(targetExpr)
		case ADT(adt_)
			var currentBlock = bc.builder.bb
		
			var joinBlock = BasicBlockCreate(bc.frame)
			
			var count = count_cases(cases)
			
			var cumulativeScope = BCCompilerEnterScope(bc) 
			cumulativeScope.termination = Termination.Always
			BCCompilerLeaveScope(bc)
			
			var defBlock:BasicBlock = joinBlock
			
			var i = 0
			
			var catchAll = false
			
			var branches = ADTJumpCase.Nil
			
			var caseList = cases
			while i < count do
				match caseList
				case Cons(case_, tail)
					caseList = tail
					
					var caseBlock = BasicBlockCreate(bc.frame)
					
					BCBuilderSetInsertPoint(bc.builder, caseBlock)
					
					var scope = BCCompilerEnterScope(bc)
					var params = AstPatternList.Nil
					var pattern_id:string
					
					match case_.pattern
					case Id(pattern)
						pattern_id = BinderGetName(pattern)
					case Cons(pattern, pat_params)
						pattern_id = BinderGetName(pattern)
						params = pat_params
					end
					
					if catchAll then
						BCCompilerError(bc, case_.loc, "match case is redundand")
					end
					
					match IRADTFindConstructor(adt_, pattern_id)
					case Nothing
						match params
						case Nil							
							catchAll = true
							BCCompilerAddScopeRef(bc, pattern_id, LocalRef.Value(targetExpr))
							defBlock = caseBlock
						case Cons(a_1,a_2)
							BCCompilerError(bc, case_.pattern.loc, "adt doesn't have such constructor")
						end
					case Just(cons)						
						BCCompilerBindParams(bc, targetExpr, cons, params)
						branches = ADTJumpCase.Cons(cons, caseBlock, branches)
						catchAll = BCCompilerCheckCaseCoverage(bc, case_.loc, branches, adt_)
					end
					
					BCCompileCode(bc, case_.block)
					
					BCCompilerLeaveScope(bc)
					
					if i == 0 then
						cumulativeScope = scope
					else
						ScopeChoice(cumulativeScope, scope)
					end
					
					BCBuilderJump(bc.builder, joinBlock)
				end
				i = i + 1
			end
			
			if catchAll == false then
				var scope = BCCompilerEnterScope(bc)
				BCCompilerLeaveScope(bc)
				ScopeChoice(cumulativeScope, scope)
			end
			
			ScopeConcat(bc.scope, cumulativeScope)
			
			BCBuilderSetInsertPoint(bc.builder, currentBlock)
			BCBuilderADTJump(bc.builder, adt_, targetExpr, branches, defBlock)
			BCBuilderSetInsertPoint(bc.builder, joinBlock)
		case other
			BCCompilerError(bc, ast.loc, "can't match non-adt value")
		end
	case While(cond, body)		
		var condBlock = BasicBlockCreate(bc.frame)
		var bodyBlock = BasicBlockCreate(bc.frame)
		var joinBlock = BasicBlockCreate(bc.frame)
		
		var loopScope = BCCompilerEnterScope(bc)
		
		BCBuilderJump(bc.builder, condBlock)
		
		BCBuilderSetInsertPoint(bc.builder, condBlock)		
		var val = BCCompileExprAs(bc, cond, IRType.Prim(IRPrimType.Bool))
		match val
		case ConstBool(b, type)
			if b then
				BCBuilderJump(bc.builder, bodyBlock)
				var bodyScope = BCCompilerEnterScope(bc)
				BCBuilderSetInsertPoint(bc.builder, bodyBlock)	
				BCCompileCode(bc, body)
				BCCompilerLeaveScope(bc)
				BCBuilderJump(bc.builder, condBlock)
				
				ScopeConcat(loopScope, bodyScope)
				ScopeConcat(loopScope, loopScope)
				BCCompilerLeaveScope(bc)
				
				bc.scope.termination = Termination.Always
			else
				BCBuilderJump(bc.builder, joinBlock)
				BCCompilerLeaveScope(bc)
				
				var bodyScope = BCCompilerEnterScope(bc)
				BCBuilderSetInsertPoint(bc.builder, bodyBlock)	
				BCCompileCode(bc, body)
				BCCompilerLeaveScope(bc)
			end
		case other
			BCBuilderCondJump(bc.builder, val, bodyBlock, joinBlock)
			
			var bodyScope = BCCompilerEnterScope(bc)
			BCBuilderSetInsertPoint(bc.builder, bodyBlock)	
			BCCompileCode(bc, body)
			BCCompilerLeaveScope(bc)
			BCBuilderJump(bc.builder, condBlock)
			
			var skipScope = BCCompilerEnterScope(bc)
			BCCompilerLeaveScope(bc)
			
			ScopeChoice(bodyScope, skipScope)
			ScopeConcat(loopScope, bodyScope)
			ScopeChoice(skipScope, loopScope)
			ScopeConcat(loopScope, skipScope)
			
			BCCompilerLeaveScope(bc)
		end
		
		ScopeConcat(bc.scope, loopScope)
			
		BCBuilderSetInsertPoint(bc.builder, joinBlock)	
	case If(cond, then_, else_)
		var val = BCCompileExprAs(bc, cond, IRType.Prim(IRPrimType.Bool))
		
		var thenBlock = BasicBlockCreate(bc.frame)
		var elseBlock = BasicBlockCreate(bc.frame)
		var joinBlock = BasicBlockCreate(bc.frame)
		
		BCBuilderCondJump(bc.builder, val, thenBlock, elseBlock)
		
		BCBuilderSetInsertPoint(bc.builder, thenBlock)		
		var thenScope = BCCompilerEnterScope(bc)
		BCCompileStmt(bc, then_)
		BCCompilerLeaveScope(bc)
		BCBuilderJump(bc.builder, joinBlock)
		
		BCBuilderSetInsertPoint(bc.builder, elseBlock)
		var elseScope = BCCompilerEnterScope(bc)
		match else_
		case Just(stmt)
			BCCompileStmt(bc, stmt)
		end
		BCCompilerLeaveScope(bc)
		BCBuilderJump(bc.builder, joinBlock)
		
		ScopeChoice(thenScope, elseScope)
		ScopeConcat(bc.scope, thenScope)
		
		BCBuilderSetInsertPoint(bc.builder, joinBlock)
	case Ret(m_expr)
		var value:ValueRef
		match m_expr
		case Nothing
			value = BCCompileCoerce(bc, ast.loc, ValueRef.ConstUnit, bc.retTy)
		case Just(expr)
			value = BCCompileExprAs(bc, expr, bc.retTy)
		end
		Loc(bc, ast.loc)
		
		bc.scope.termination = Termination.Always
		
		BCBuilderReturn(bc.builder, value)
	case Block(stmts)
		var scope = BCCompilerEnterScope(bc)
		BCCompileCode(bc, stmts)
		BCCompilerLeaveScope(bc)
		
		ScopeConcat(bc.scope, scope)
	end
end

function BCCompileWritableReference(bc:BCCompiler, ast:AstExpr):WritableReference
	match ast
	case Id(id)
		var ref = BCCompilerResolveRef(bc, ast.loc, id)
		match ref
		case Value(val)
			BCCompilerError(bc, ast.loc, "temporary value is not writable")
		case Variable(var_)
			return WritableReference.Variable(var_)
		case Global(symbol)
			match symbol
			case Global(global_)
				return WritableReference.Global(global_)
			case other
				BCCompilerError(bc, ast.loc, "writing to this symbol reference is not implemented")
			end
		end
	case Index(lhs, rhs)
		var ref = BCCompileIndexableReference(bc, lhs)
		match ref
		case Value(val)
			match ValueRefGetType(val)
			case ArrayUnsized(elTy)
				var idx = BCCompileExprAs(bc, rhs, IRType.Prim(IRPrimType.I32))
				return WritableReference.ArrayIndex(val, idx, elTy)
			case other BCCompilerError(bc, ast.loc, "writing to this reference is not implemented")
			end			
		case other
			BCCompilerError(bc, ast.loc, "writing to this reference is not implemented")
		end
	case Dot(lhs, id)
		var ref = BCCompileIndexableReference(bc, lhs)
		match ref
		case Value(val)
			match ValueRefGetType(val)
			case ADT(adt_)
				match IRADTFindField(adt_, id)
				case Nothing BCCompilerError(bc, ast.loc, "no such field")
				case Just(field_)
					return WritableReference.ADTField(val, field_)
				end
			case other BCCompilerError(bc, ast.loc, "writing to this reference is not implemented")
			end			
		case other
			BCCompilerError(bc, ast.loc, "writing to this reference is not implemented")
		end
	case other BCCompilerError(bc, ast.loc, "expression is not implemented as a writable reference") 
	end
end

function BCCompileIndexableReference(bc:BCCompiler, ast:AstExpr):IndexableRef
	Loc(bc, ast.loc)
	match ast
	case Id(id)
		var ref = BCCompilerResolveRef(bc, ast.loc, id)
		match ref
		case Global(symbol)
			match symbol
			case ADT
				return IndexableRef.Symbol(symbol)
			end
		end
	end
	
	return IndexableRef.Value(BCCompileExprNoHint(bc, ast))
end

function BCCompileCallableReference(bc:BCCompiler, ast:AstExpr, m_ret_type:MaybeIRType):CallableRef
	Loc(bc, ast.loc)
	match ast
	case Id(id)
		var ref = BCCompilerResolveRef(bc, ast.loc, id)
		match ref
		case Global(symbol)
			match symbol
			case Function(fun)
				return CallableRef.Function(fun)
			case other
				BCCompilerError(bc, ast.loc, "calling this symbol reference is not implemented")
			end
		case other
			BCCompilerError(bc, ast.loc, "calling this reference is not implemented")
		end
	case Dot(lhs, id)
		var ref = BCCompileIndexableReference(bc, lhs)
		match ref
		case Symbol(symbol)
			match symbol
			case ADT(adt_)
				var m_cons = IRADTFindConstructor(adt_, id)
				match m_cons
				case Nothing BCCompilerError(bc, ast.loc, "adt constructor not found")
				case Just(cons)
					return CallableRef.ADTConstructor(cons)
				end
			case other
				BCCompilerError(bc, ast.loc, "indexing this symbol reference is not implemented")
			end
		case other
			BCCompilerError(bc, ast.loc, "indexing this reference is not implemented")
		end
	case other BCCompilerError(bc, ast.loc, "expression is not implemented as a callable reference")
	end
end

function BCCompileExpr(bc:BCCompiler, ast:AstExpr, m_type:MaybeIRType):ValueRef
	Loc(bc, ast.loc)
	match ast
	case NumberLit(content)
		var num = StrToInt(content)
		return ValueRef.ConstNum(num, IRType.Prim(IRPrimType.I32))
	case StringLit(content)
		var str = DecodeStr(content)
		return ValueRef.ConstString(str, IRType.Prim(IRPrimType.String))
	case New(ty)
		match BCResolveType(bc, ty)
		case ArraySized(elTy, size)
			var sizeVal = BCCompileExprAs(bc, size.ast, IRType.Prim(IRPrimType.I32))
			return BCBuilderCallIntrinsic(bc.builder, Intrinsic.NewArray(elTy), ValueRefList.Cons(sizeVal, ValueRefList.Nil), IRType.ArrayUnsized(elTy))
		case other
			BCCompilerError(bc, ast.loc, "'new' is only available for sized arrays")
		end
	case Index(lhs, rhs)
		var ref = BCCompileIndexableReference(bc, lhs)
		match ref
		case Value(val)
			match ValueRefGetType(val)
			case ArrayUnsized(elTy)
				var idx = BCCompileExprAs(bc, rhs, IRType.Prim(IRPrimType.I32))
				return BCBuilderArrayRead(bc.builder, val, idx, elTy)
			case other BCCompilerError(bc, ast.loc, "writing to this reference is not implemented")
			end			
		case other
			BCCompilerError(bc, ast.loc, "writing to this reference is not implemented")
		end
	case Id(id)
		if id == "true" then
			return ValueRef.ConstBool(true, IRType.Prim(IRPrimType.Bool)) 
		elif id == "false" then
			return ValueRef.ConstBool(false, IRType.Prim(IRPrimType.Bool)) 
		elif id == "undef" then
			return ValueRef.Undef(IRType.Prim(IRPrimType.Undef)) 
		end
		
		var ref = BCCompilerResolveRef(bc, ast.loc, id)
		match ref
		case Value(val)
			return val
		case Variable(var_)
			return BCBuilderReadVariable(bc.builder, var_)
		case Global(symbol)
			match symbol
			case Global(global_)
				return BCBuilderReadGlobal(bc.builder, global_)
			case other
				BCCompilerError(bc, ast.loc, "reading this symbol reference is not implemented")
			end
		end
	case Dot(lhs, id)
		var ref = BCCompileIndexableReference(bc, lhs)
		match ref
		case Symbol(symbol)
			match symbol
			case ADT(adt_)
				var m_cons = IRADTFindConstructor(adt_, id)
				match m_cons
				case Nothing BCCompilerError(bc, ast.loc, "adt constructor not found")
				case Just(cons)
					match cons.type		
					case Function(retTy, params)
						var args = BCCompileArgs(bc, ast.loc, AstExprList.Nil, params)
						return BCBuilderCallConstructor(bc.builder, cons, args, retTy)
					end
				end
			case other
				BCCompilerError(bc, ast.loc, "indexing this symbol reference is not implemented")
			end
		case Value(val)
			match ValueRefGetType(val)
			case ADT(adt_)
				match IRADTFindField(adt_, id)
				case Nothing BCCompilerError(bc, ast.loc, "no such field")
				case Just(field_)
					return BCBuilderReadADTField(bc.builder, val, field_)
				end
			case other BCCompilerError(bc, ast.loc, "indexing this reference is not implemented")
			end
		end
		
		BCCompilerError(bc, ast.loc, "invalid dot expression")
	case BinOp(lhs, op, rhs)
		var opId:i32 = 0
		match op
		case CmpEQ opId = 1
		case CmpNE opId = 1
		case CmpLT opId = 1
		case CmpGT opId = 1
		case CmpLE opId = 1
		case CmpGE opId = 1
		
		case Plus opId = 2
		case Divide opId = 3
		case Multiply opId = 3
		case Minus opId = 3
		
		case And opId = 4
		case Or opId = 5
		end
		
		if opId >= 1 and opId <= 3 then
			var lExpr = BCCompileExprNoHint(bc, lhs)
			var rExpr = BCCompileExprNoHint(bc, rhs)
			var commonType = BCCompileUnifyTypes(bc, ast.loc, ValueRefGetType(lExpr), ValueRefGetType(rExpr))
			lExpr = BCCompileCoerce(bc, lhs.loc, lExpr, commonType)
			rExpr = BCCompileCoerce(bc, rhs.loc, rExpr, commonType)
			
			if opId == 1 then
				--comparison allowed for bool, i32, string, pointer, and adt
				var cmpOp:Comparison
				
				match op
				case CmpEQ cmpOp = Comparison.EQ
				case CmpNE cmpOp = Comparison.NE
				case CmpLT cmpOp = Comparison.LT
				case CmpGT cmpOp = Comparison.GT
				case CmpLE cmpOp = Comparison.LE
				case CmpGE cmpOp = Comparison.GE
				end
				
				var intrinsic:Intrinsic
				var ok:bool = false
				
				match commonType
				case Prim(type)
					match type
					case Bool
						ok = true
						intrinsic = Intrinsic.CompareBool(cmpOp)
					case I32
						ok = true
						intrinsic = Intrinsic.CompareI32(cmpOp)
					case String
						ok = true
						intrinsic = Intrinsic.CompareString(cmpOp)
					case Pointer
						ok = true
						intrinsic = Intrinsic.ComparePointer(cmpOp)
					end
				case ADT(adt_)
					ok = true
					intrinsic = Intrinsic.CompareRefEq(cmpOp)
				end
				
				if ok then
					return BCBuilderCallIntrinsic(bc.builder, intrinsic, ValueRefList.Cons(lExpr, ValueRefList.Cons(rExpr, ValueRefList.Nil)), IRType.Prim(IRPrimType.Bool))
				end
			elif opId == 2 then	
				--plus allowed for string
				match commonType
				case Prim(type)
					match type
					case String
						return BCBuilderCallIntrinsic(bc.builder, Intrinsic.StringConcat, ValueRefList.Cons(lExpr, ValueRefList.Cons(rExpr, ValueRefList.Nil)), commonType)
					end
				end
			end
			if opId == 2 or opId == 3 then
				--airth allowed for i32
				match commonType
				case Prim(type)
					match type
					case I32
						var intrinsic:Intrinsic
						match op
						case Plus intrinsic = Intrinsic.Arith(ArithOp.Plus)
						case Minus intrinsic = Intrinsic.Arith(ArithOp.Minus)
						case Divide intrinsic = Intrinsic.Arith(ArithOp.Divide)
						case Multiply intrinsic = Intrinsic.Arith(ArithOp.Multiply)
						end
						return BCBuilderCallIntrinsic(bc.builder, intrinsic, ValueRefList.Cons(lExpr, ValueRefList.Cons(rExpr, ValueRefList.Nil)), commonType)
					end
				end
			end
		elif opId == 4 or opId == 5 then
			var boolTy = IRType.Prim(IRPrimType.Bool)
			
			var lExpr = BCCompileExprAs(bc, lhs, boolTy)
			var secondBlock = BasicBlockCreate(bc.frame)
			var joinBlock = BasicBlockCreate(bc.frame)
			var currentBlock = bc.builder.bb
			
			if opId == 4 then
				BCBuilderCondJump(bc.builder, lExpr, secondBlock, joinBlock)
			else
				BCBuilderCondJump(bc.builder, lExpr, joinBlock, secondBlock)
			end
			
			BCBuilderSetInsertPoint(bc.builder, secondBlock)
			var rExpr = BCCompileExprAs(bc, rhs, boolTy)
			var exitBlock = bc.builder.bb
			BCBuilderJump(bc.builder, joinBlock)
			
			BCBuilderSetInsertPoint(bc.builder, joinBlock)
			
			var phi0 = PHIList.Nil		
			var phi1 = PHIList.Cons(currentBlock, ValueRef.ConstBool(opId == 5, boolTy), phi0)
			var phi2 = PHIList.Cons(exitBlock, rExpr, phi1)
			
			return BCBuilderPHI(bc.builder, boolTy, phi2)
		end
		
		BCCompilerError(bc, ast.loc, "operator not implemented")
	case Call(head, args)
		var head_val = BCCompileCallableReference(bc, head, m_type)
		var type = CallableRefGetType(head_val)
		match type		
		case Function(retTy, params)
			var args = BCCompileArgs(bc, ast.loc, args, params)
			match head_val
			case Function(fun)
				return BCBuilderCallFunction(bc.builder, fun, args, retTy)
			case ADTConstructor(cons)
				return BCBuilderCallConstructor(bc.builder, cons, args, retTy)
			end
		case other
			BCCompilerError(bc, head.loc, "is not a callable type")
		end
	end
end

function BCCompileArgs(bc:BCCompiler, loc:SrcLoc, args:AstExprList, params:IRTypeList):ValueRefList
	while true do
		match args
		case Nil 
			match params 
			case Nil return ValueRefList.Nil
			case Cons(ty, ps)
				BCCompilerError(bc, loc, "not enough arguments")
			end			
		case Cons(arg, tail) 
			match params 
			case Nil BCCompilerError(bc, arg.loc, "too many arguments")
			case Cons(ty, ps)
				return ValueRefList.Cons(BCCompileExprAs(bc, arg, ty), BCCompileArgs(bc, loc, tail, ps))
			end			
		end
	end
end

function BCCompilerResolveRef(bc:BCCompiler, loc:SrcLoc, id:string):LocalRef
	return BCCompilerResolveRefInScope(bc, loc, id, bc.scope)
end

function BCCompilerResolveRefInScope(bc:BCCompiler, loc:SrcLoc, id:string, scope:Scope):LocalRef
	var binding = scope.binding
	while true do
		match binding
		case Nil
			if scope.parent == scope then
				return BCCompilerResolveGlobal(bc, loc, id, scope)
			else
				scope = scope.parent
				binding = scope.binding
			end
		case Binding(name, ref, tail)
			if name == id then
				return ref
			end
			binding = tail
		end
	end
end

function BCCompilerResolveGlobal(bc:BCCompiler, loc:SrcLoc, id:string, scope:Scope):LocalRef
	var symbol = IRResolveGlobalSymbol(bc.irCompiler, loc, id)
	var ref = LocalRef.Global(symbol)
	scope.binding = ScopeBinding.Binding(id, ref, scope.binding)
	return ref
end

function BCCompileExprNoHint(bc:BCCompiler, ast:AstExpr):ValueRef
	return BCCompileExpr(bc, ast, MaybeIRType.Nothing)
end

function BCCompileExprAs(bc:BCCompiler, ast:AstExpr, type:IRType):ValueRef
	var val = BCCompileExpr(bc, ast, MaybeIRType.Just(type))
	val = BCCompileCoerce(bc, ast.loc, val, type)
	return val
end

function BCCompileCoerce(bc:BCCompiler, loc:SrcLoc, val:ValueRef, targetType:IRType):ValueRef
	var actualType = ValueRefGetType(val)
	var coerce = BCCompileFindCoerce(bc, actualType, targetType)
	match coerce
	case None 
		BCCompilerError(bc, loc, "can't coerce type")
	case ID return val
	case FromUndef 
		BCBuilderUnreachable(bc.builder)
		return ValueRef.Undef(targetType)
	end
end

function BCCompileUnifyTypes(bc:BCCompiler, loc:SrcLoc, leftTy:IRType, rightTy:IRType):IRType
	var coerce = BCCompileFindCoerce(bc, leftTy, rightTy)
	match coerce
	case ID return leftTy		
	case other BCCompilerError(bc, loc, "types are not unifiable")
	end
end

function BCCompileFindCoerce(bc:BCCompiler, actualType:IRType, targetType:IRType):Coerce
	match actualType
	case Prim(ty1)
		match ty1
		case Undef
			return Coerce.FromUndef
		end
	end
	
	match actualType
	case Prim(ty1)
		match targetType
		case Prim(ty2)
			if PrimGetTag(ty1) == PrimGetTag(ty2) then
				return Coerce.ID
			end
		end
	case ADT(decl1)
		match targetType
		case ADT(decl2)
			if decl1 == decl2 then
				return Coerce.ID
			end
		end
	case ArrayUnsized(elTy1)
		match targetType
		case ArrayUnsized(elTy2)
			match BCCompileFindCoerce(bc, elTy1, elTy2)
			case ID
				return Coerce.ID
			end
		end
	end
	
	return Coerce.None
end


