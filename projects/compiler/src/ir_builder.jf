import main.ir
import main.main
import main.ast
import main.ast_expr
import main.ast_type
import main.ast_stmt
import main.prelude
import main.compiler

adt IRBuilder
	New
	
	field context:CompilerContext
	field file:IRSourceFile
end

function IRBuilderCreate(context:CompilerContext):IRBuilder
	var builder = IRBuilder.New
	
	builder.context = context
	
	return builder
end

function BuildSourceRef(filename:string):SourceFileRef
	var ref = SourceFileRef.New
	ref.path = filename
	
	var idx = Max(LastIndexOf(filename, CharCode("/")), LastIndexOf(filename, CharCode("\\")))
	if idx >= 0 then
		ref.dir = Substring(filename, 0, idx)
		ref.filename = Substring(filename, idx + 1, StringLength(filename) - idx - 1)
		var basename = Substring(filename, idx + 1, StringLength(filename) - idx - 1 - 3) --remove .jf
		idx = IndexOf(basename, CharCode("."))
		if idx >= 0 then
			ref.basename = Substring(basename, 0, idx)
			ref.suffix = Substring(basename, idx + 1, StringLength(basename) - idx - 1)
		else
			ref.basename = basename
			ref.suffix = ""
		end
	else
		WriteLn("File " + filename + " has invalid path")
		Exit(1)
	end
	
	return ref
end

function IRBuilderError(builder:IRBuilder, loc:SrcLoc, message:string)
	match loc
	case At(line, col)
		WriteLn(builder.file.file.path + "(line " + IntToStr(line + 1) + ", col " + IntToStr(col + 1) + "): IRBuilder Error: " + message)
	end
	Exit(1)
end

function IRBuilderProcessFile(builder:IRBuilder, module:string, unit_prefix:string, filename:string, ast:AstFile)
	var sourceRef = BuildSourceRef(filename)
	
	var prefix = module + "."
	
	if StringLength(unit_prefix) > 0 then
		prefix = prefix + unit_prefix + "."
	end
	
	var unit_ = CompilerGetCompilationUnit(builder.context, prefix + sourceRef.basename)
	
	var file = IRSourceFileCreate(unit_, sourceRef)
	builder.file = file
	
	IRBuilderBuild(builder, ast)	
end

function IRBuilderBuild(builder:IRBuilder, ast:AstFile)
	IRBuildImports(builder, ast.imports)
	IRBuildSymbols(builder, ast.tlds)
end

function IRBuildImports(builder:IRBuilder, imports:AstImportList)
	while true do
		match imports 
		case Nil
			return
		case Cons(import_, tail)
			IRBuildImport(builder, import_)
			imports = tail
		end
	end
end

function IRBuildSymbols(builder:IRBuilder, tlds:AstTopLevelList)
	while true do
		match tlds 
		case Nil
			return
		case Cons(tld, tail)
			IRBuildSymbol(builder, tld)
			tlds = tail
		end
	end
end

function IRBuildSymbol(builder:IRBuilder, tld:AstTopLevel)
	match tld
	case Global(name, type, init)
		var global_ = IRGlobalDecl.New
		global_.type = IRBuildTypeNode(builder, type)
		global_.expr = IRBuildExprNode(builder, init)
		global_.symbol = IRSymbol.Global(global_)
		IRBuilderInsertSymbol(builder, BinderGetName(name), tld.loc, global_.symbol)
	case ADT(name, cons, fields)
		var adt_ = IRADTDecl.New
		adt_.selfType = IRType.ADT(adt_)
		adt_.metaType = IRType.ADTMetaclass(adt_)
		adt_.symbol = IRSymbol.ADT(adt_)
		IRBuilderInsertSymbol(builder, BinderGetName(name), tld.loc, adt_.symbol)
		
		adt_.fields = IRBuildADTFields(builder, adt_, fields, 0)
		adt_.cons = IRBuildADTConstructors(builder, adt_, cons, 0)
	case Function(name, params, retTy, body)
		var fun = IRFunctionDecl.New
		fun.symbol = IRSymbol.Function(fun)
		IRBuilderInsertSymbol(builder, BinderGetName(name), tld.loc, fun.symbol)
		
		fun.params = IRBuildParamList(builder, params)
		fun.retTy = IRBuildTypeNodeFromMaybe(builder, tld.loc, retTy)
		fun.body = IRBuildFunctionBody(builder, body)
	end
end

function IRBuildFunctionBody(builder:IRBuilder, ast:AstFuncBody):IRFunctionBody
	var body:IRFunctionBody
	match ast
	case FFIImport(text)
		body = IRFunctionBody.FFIImport(text)
	case Block(stmts)
		body = IRFunctionBody.Block(IRBuildBlockNode(builder, stmts))
	end
	body.loc = ast.loc
	return body
end

function IRBuildBlockNode(builder:IRBuilder, ast:AstStmtList):IRBlockNode
	var block = IRBlockNode.New
	block.ast = ast
	return block
end

function IRBuildADTConstructors(builder:IRBuilder, adt_:IRADTDecl, cons:AstADTConsList, index:i32):IRADTConsList
	match cons
	case Nil return IRADTConsList.Nil
	case Cons(ast, tail)
		var constr = IRADTCons.New
		constr.owner = adt_
		constr.index = index
		match ast.name
		case NameAt(name, loc)
			constr.name = name
			constr.loc = loc
		end	
		constr.params = IRBuildParamList(builder, ast.params)
		return IRADTConsList.Cons(constr, IRBuildADTConstructors(builder, adt_, tail, index + 1))
	end
end

function IRBuildParamList(builder:IRBuilder, params:AstParamList):IRParamList
	match params
	case Nil return IRParamList.Nil
	case Cons(ast, tail)
		var param = IRParam.New
		match ast.name
		case NameAt(name, loc)
			param.name = name
			param.loc = loc
		end	
		param.type = IRBuildTypeNode(builder, ast.type)
		return IRParamList.Cons(param, IRBuildParamList(builder, tail))
	end
end

function IRBuildADTFields(builder:IRBuilder, adt_:IRADTDecl, fields:AstADTFieldsList, idx:i32):IRADTFieldList
	match fields 
	case Nil return IRADTFieldList.Nil
	case Cons(ast, tail)
		var field_ = IRADTField.New
		field_.owner = adt_
		match ast.name
		case NameAt(name, loc)
			field_.name = name
			field_.loc = loc
		end			
		field_.index = idx
		field_.type = IRBuildTypeNode(builder, ast.type)
		return IRADTFieldList.Cons(field_, IRBuildADTFields(builder, adt_, tail, idx + 1))
	end
end

function IRBuildTypeNodeFromMaybe(builder:IRBuilder, loc:SrcLoc, m_type:MaybeAstType):IRTypeNode
	match m_type
	case Nothing
		var type = IRTypeNode.New
		type.loc = loc
		type.type = IRType.Prim(IRPrimType.Unit)
		return type
	case Just(ast)
		return IRBuildTypeNode(builder, ast)
	end	
end

function IRBuildTypeNode(builder:IRBuilder, ast:AstType):IRTypeNode
	var type = IRTypeNode.New
	type.loc = ast.loc
	type.type = IRBuildType(builder, ast)
	type.resolved = false
	return type
end

function IRBuildType(builder:IRBuilder, ast:AstType):IRType
	match ast 
	case Ref(binder)
		match binder
		case NameAt(id, loc)
			if id == "unit" then
				return IRType.Prim(IRPrimType.Unit)
			elif id == "i32" then
				return IRType.Prim(IRPrimType.I32)
			elif id == "string" then
				return IRType.Prim(IRPrimType.String)
			elif id == "pointer" then
				return IRType.Prim(IRPrimType.Pointer)
			elif id == "bool" then
				return IRType.Prim(IRPrimType.Bool)
			elif id == "undef" then
				return IRType.Prim(IRPrimType.Undef)
			else
				var ref = IRTypeReference.New
				ref.id = id
				ref.loc = loc
				ref.owner = builder.file
				return IRType.Ref(ref)
			end
		end
	case Array(elementTy, size)
		match size
		case Nothing
			return IRType.ArrayUnsized(IRBuildType(builder, elementTy))
		case Just(expr)
			return IRType.ArraySized(IRBuildType(builder, elementTy), IRBuildExprNode(builder, expr))
		end
	end
end

function IRBuildExprNode(builder:IRBuilder, ast:AstExpr):IRExprNode
	var expr = IRExprNode.New
	expr.ast = ast
	expr.loc = ast.loc
	return expr
end

function IRBuilderInsertSymbol(builder:IRBuilder, name:string, loc:SrcLoc, symbol:IRSymbol)
	symbol.owner = builder.file
	symbol.loc = loc
	symbol.name = name
	builder.file.symbols = IRSymbolList.Cons(symbol, builder.file.symbols)
end

function IRBuildImport(builder:IRBuilder, astImport:AstImport)
	var import_ = IRImport.New
	import_.loc = astImport.loc
	import_.qid = astImport.qid
	import_.name = PrintQualID(astImport.qid)
	
	builder.file.imports = IRImportList.Cons(import_, builder.file.imports)
end

