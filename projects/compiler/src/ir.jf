import main.ast
import main.ast_expr
import main.ast_type
import main.ast_stmt
import core.prelude
import main.bytecode
import main.llvm_codegen

adt IRImport
	New
	
	field loc:SrcLoc
	field qid:QualID
	field name:string
	
	field resolution:IRCompilationUnit
end

adt IRImportList
	Nil
	Cons(import_:IRImport, tail:IRImportList)
end

adt IRSymbol
	Function(decl:IRFunctionDecl)
	Global(decl:IRGlobalDecl)
	ADT(decl:IRADTDecl)
	
	field owner:IRSourceFile
	field loc:SrcLoc
	field name:string
end

adt MaybeIRSymbol
	Nothing
	Just(symbol:IRSymbol)
end

adt IRFunctionDecl
	New
	
	field symbol:IRSymbol
	field params:IRParamList
	field retTy:IRTypeNode
	
	field type:IRType
	
	field body:IRFunctionBody
end

adt IRFunctionBody
	FFIImport(text:string)
	Block(block:IRBlockNode)
	
	field loc:SrcLoc
end

adt IRBlockNode
	New
	
	field ast:AstStmtList
	field frame:FunctionFrame
end
	
adt IRADTDecl
	New
	
	field cons:IRADTConsList
	field fields:IRADTFieldList
	field symbol:IRSymbol
	field selfType:IRType
	field metaType:IRType
end

adt IRADTField
	New
	
	field owner:IRADTDecl
	field name:string
	field loc:SrcLoc
	field type:IRTypeNode
	field index:i32
end

adt IRADTFieldList
	Nil
	Cons(field_:IRADTField, tail:IRADTFieldList)
end

adt IRADTCons
	New
	
	field owner:IRADTDecl
	field index:i32
	field name:string
	field loc:SrcLoc
	field params:IRParamList
	
	field type:IRType
end

adt MaybeIRADTCons
	Nothing
	Just(constr:IRADTCons)
end

adt MaybeIRADTField
	Nothing
	Just(field_:IRADTField)
end

adt IRADTConsList
	Nil
	Cons(cons:IRADTCons, tail:IRADTConsList)
end

adt IRParam
	New
	
	field name:string
	field loc:SrcLoc
	field type:IRTypeNode
end

adt IRParamList
	Nil
	Cons(param:IRParam, tail:IRParamList)
end

adt IRGlobalDecl
	New
	
	field symbol:IRSymbol
	field type:IRTypeNode
	field expr:IRExprNode
end

adt IRTypeNode
	New
	
	field resolved:bool
	field loc:SrcLoc
	field type:IRType
end

adt IRExprNode
	New
	
	field loc:SrcLoc
	field ast:AstExpr
	field frame:FunctionFrame
end

adt IRPrimType
	Unit
	Undef
	I32
	String
	Pointer
	Bool
	I64
	U64
end

function PrimGetTag(prim:IRPrimType):i32
	match prim
	case Unit return 0
	case I32 return 1
	case String return 2
	case Pointer return 3
	case Bool return 4
	case other WriteLn("prim type not implemented") Exit(1)
	end
end

adt IRTypeReference
	New
	
	field id:string
	field loc:SrcLoc
	field owner:IRSourceFile
	field resolution:IRType
end

adt IRType
	Ref(ref:IRTypeReference)
	Prim(type:IRPrimType)
	ADT(decl:IRADTDecl)
	ADTMetaclass(decl:IRADTDecl)
	ArrayUnsized(elementType:IRType)
	ArraySized(elementType:IRType, size:IRExprNode)
	Function(retTy:IRType, list:IRTypeList)
end

adt IRTypeList
	Nil
	Cons(type:IRType, tail:IRTypeList)
end

adt MaybeIRType
	Nothing 
	Just(val:IRType)
end

adt IRSymbolList
	Nil
	Cons(symbol:IRSymbol, tail:IRSymbolList)
end

adt SourceFileRef
	New
	
	field dir:string
	field basename:string
	field suffix:string
	field path:string
	field filename:string
end

adt IRSourceFile
	New
	
	field file:SourceFileRef
	
	field unit_:IRCompilationUnit
	
	field imports:IRImportList
	field symbols:IRSymbolList
end

adt IRSourceFileList
	Nil
	Cons(file:IRSourceFile, tail:IRSourceFileList)
end

adt IRCompilationUnit
	New
	
	field name:string
	field files:IRSourceFileList
end

adt IRCompilationUnitList
	Nil
	Cons(unit_:IRCompilationUnit, tail:IRCompilationUnitList)
end

function IRCompilationUnitCreate(name:string):IRCompilationUnit
	var unit_ = IRCompilationUnit.New
	unit_.name = name
	unit_.files = IRSourceFileList.Nil
	return unit_
end

function IRSourceFileCreate(unit_:IRCompilationUnit, ref:SourceFileRef):IRSourceFile
	var file = IRSourceFile.New
	file.file = ref	
	file.unit_ = unit_
	file.imports = IRImportList.Nil
	file.symbols = IRSymbolList.Nil
	
	IRUnitInsertFile(unit_, file)
	
	return file
end


function IRUnitInsertFile(unit_:IRCompilationUnit, file:IRSourceFile)
	var files = unit_.files
	while true do
		match files
		case Nil
			unit_.files = IRSourceFileList.Cons(file, unit_.files)
			return
		case Cons(file_, tail)
			files = tail
			if file_.file.suffix == file.file.suffix then
				WriteLn("Duplicate source file for unit " + unit_.name + " with suffix " + file.file.suffix)
				Exit(1)
			end
		end
	end
end

function IRADTFindConstructor(adt_:IRADTDecl, name:string):MaybeIRADTCons
	var cons = adt_.cons
	while true do
		match cons
		case Nil return MaybeIRADTCons.Nothing
		case Cons(const, tail)
			if const.name == name then
				return MaybeIRADTCons.Just(const)
			end
			cons = tail
		end
	end
end

function IRADTFindField(adt_:IRADTDecl, name:string):MaybeIRADTField
	var fields = adt_.fields
	while true do
		match fields
		case Nil return MaybeIRADTField.Nothing
		case Cons(field_, tail)
			if field_.name == name then
				return MaybeIRADTField.Just(field_)
			end
			fields = tail
		end
	end
end

