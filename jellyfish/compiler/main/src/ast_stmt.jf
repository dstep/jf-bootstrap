import main.ast
import main.ast_expr
import main.ast_type

adt AstStmtList
	Nil
	Cons(stmt:AstStmt, tail:AstStmtList)
end

adt AstPatternList
	Nil
	Cons(pattern:AstPattern, tail:AstPatternList)
end

adt MaybeAstPattern
	Nothing
	Just(pattern:AstPattern)
end

adt AstPattern
	Cons(name:Binder, params:AstPatternList)
	Id(name:Binder)

	field loc:SrcLoc
end

adt AstCase
	New
	
	field loc:SrcLoc
	field pattern:AstPattern
	field block:AstStmtList
end

adt AstCaseList
	Nil
	Cons(case_:AstCase, tail:AstCaseList)
end

adt AstStmt
	Var(name:Binder, type:MaybeAstType, init:MaybeAstExpr)
	Assign(lhs:AstExpr, rhs:AstExpr)
	Eval(expr:AstExpr)
	Ret(expr:MaybeAstExpr)
	If(cond:AstExpr, then_:AstStmt, else_:MaybeAstStmt)
	While(cond:AstExpr, body:AstStmtList)
	Match(expr:AstExpr, cases:AstCaseList)
	Block(list:AstStmtList)
	
	field loc:SrcLoc
end

adt MaybeAstStmt
	Nothing
	Just(stmt:AstStmt)
	
end
