import main.llvm
import main.prelude

import main.lexer
import main.parser

import main.ir_builder
import main.compiler

import main.ir_compiler

import main.bytecode_compiler

import main.llvm_codegen

--lexer +
--parser +
--ir builder +
--ir compiler +
--bytecode builder
--codegen

global Compiler:CompilerContext = CompilerContextCreate()

function ProcessFile(filename:string)	
	WriteLn("++++ Processing " + filename + " ++++")
	match ReadFile(filename)
	case None
		WriteLn("Can't read file " + filename)
	case Data(data, size)
		WriteLn("Read " + IntToStr(size) + " bytes, running lexer...")		
		var lc = LexerCreate()
		LexerFeed(lc, filename, data, size)
		var tokens = LexerRun(lc)
		WriteLn("Lexing done, running parser...")		
		var parser = ParserCreate()
		ParserFeed(parser, filename, tokens)
		var ast = ParserRun(parser)
		WriteLn("Parsing done. Building IR...")	
		var irBuilder = IRBuilderCreate(Compiler)
		IRBuilderProcessFile(irBuilder, filename, ast)
	end
	WriteLn("---- Leaving ----")
end

function ProcessDir(dirname:string)
	var dir = ReadDirectory(dirname)
	
	WriteLn("=====ENTERING DIRECTORY " + dirname + "=======")
	
	
	var i = 0
	while i < dir.count do
		var entry = dir.files[i]
		if EndsWith(entry, ".jf") then
			ProcessFile(dirname + "\\" + entry)
		end
		i = i + 1
	end
	
	WriteLn("=====LEAVING DIRECTORY " + dirname + "=======")
end

function run()
	var dir = "D:\\Dropbox\\language_ws\\jf-bootstrap\\jellyfish\\compiler\\main\\toy"
	
	Compiler.output = "D:\\Dropbox\\language_ws\\jf-bootstrap\\jellyfish\\self_output"
	
	ClearOutput(Compiler.output)
	
	ProcessDir(dir)	
	
	IRCompile(Compiler)
	BCCompile(Compiler)
	
	RunLLVMCodegen(Compiler)
end

function ClearOutput(dirname:string)
	var dir = ReadDirectory(dirname)
	
	var i = 0
	while i < dir.count do
		var entry = dir.files[i]
		if entry <> "." and entry <> ".." then
			RemoveFile(dirname + "\\" + entry)
		end
		i = i + 1
	end
end
