import main.bytecode
import main.ir

adt BCBuilder
	New
	
	field bb:BasicBlock
	field loc:DebugLoc
end

function BCBuilderCreate():BCBuilder
	var builder = BCBuilder.New
	builder.loc = DebugLoc.None
	return builder
end

function BCBuilderSetInsertPoint(builder:BCBuilder, bb:BasicBlock)
	builder.bb = bb
end

function BCBuilderSetDebugLoc(builder:BCBuilder, dbg:DebugLoc)
	builder.loc = dbg
end

function BCBuilderInsert(builder:BCBuilder, ins:Instruction, ty:IRType)
	ins.type = ty
	ins.dbg = builder.loc
	ins.value = ValueRef.Instr(ins)
	BasicBlockEmit(builder.bb, ins)
end

function BCBuilderWriteVariable(builder:BCBuilder, var_:Variable, val:ValueRef)
	var ins = Instruction.WriteVariable(var_, val)
	BCBuilderInsert(builder, ins, IRType.Prim(IRPrimType.Unit))
end

function BCBuilderWriteGlobal(builder:BCBuilder, global_:IRGlobalDecl, val:ValueRef)
	var ins = Instruction.WriteGlobal(global_, val)
	BCBuilderInsert(builder, ins, IRType.Prim(IRPrimType.Unit))
end

function BCBuilderWriteADTField(builder:BCBuilder, ptr:ValueRef, field_:IRADTField, val:ValueRef)
	var ins = Instruction.WriteADTField(ptr, field_, val)
	BCBuilderInsert(builder, ins, IRType.Prim(IRPrimType.Unit))
end

function BCBuilderReadVariable(builder:BCBuilder, var_:Variable):ValueRef
	var ins = Instruction.ReadVariable(var_)
	BCBuilderInsert(builder, ins, var_.type)
	return ins.value
end

function BCBuilderReadGlobal(builder:BCBuilder, global_:IRGlobalDecl):ValueRef
	var ins = Instruction.ReadGlobal(global_)
	BCBuilderInsert(builder, ins, global_.type.type)
	return ins.value
end

function BCBuilderReadADTField(builder:BCBuilder, ptr:ValueRef, field_:IRADTField):ValueRef
	var ins = Instruction.ReadADTField(ptr, field_)
	BCBuilderInsert(builder, ins, field_.type.type)
	return ins.value
end

function BCBuilderCallFunction(builder:BCBuilder, fun:IRFunctionDecl, args:ValueRefList, type:IRType):ValueRef
	var ins = Instruction.CallFunction(fun, args)
	BCBuilderInsert(builder, ins, type)
	return ins.value
end

function BCBuilderCallIntrinsic(builder:BCBuilder, intr:Intrinsic, args:ValueRefList, type:IRType):ValueRef
	var ins = Instruction.CallIntrinsic(intr, args)
	BCBuilderInsert(builder, ins, type)
	return ins.value
end

function BCBuilderCallConstructor(builder:BCBuilder, cons:IRADTCons, args:ValueRefList, type:IRType):ValueRef
	var ins = Instruction.CallConstructor(cons, args)
	BCBuilderInsert(builder, ins, type)
	return ins.value
end

function BCBuilderPHI(builder:BCBuilder, type:IRType, phi:PHIList):ValueRef
	var ins = Instruction.PHI(phi)
	BCBuilderInsert(builder, ins, type)
	return ins.value
end

function BCBuilderReturn(builder:BCBuilder, val:ValueRef)
	BCBuilderInsert(builder, Instruction.Return(val), IRType.Prim(IRPrimType.Unit))
end

function BCBuilderJump(builder:BCBuilder, bb:BasicBlock)
	BCBuilderInsert(builder, Instruction.Jump(bb), IRType.Prim(IRPrimType.Unit))
end

function BCBuilderCondJump(builder:BCBuilder, cond:ValueRef, then_:BasicBlock, else_:BasicBlock)
	BCBuilderInsert(builder, Instruction.CondJump(cond, then_, else_), IRType.Prim(IRPrimType.Unit))
end


function BCBuilderArrayWrite(builder:BCBuilder, array:ValueRef, idx:ValueRef, value:ValueRef)
	var ins = Instruction.ArrayWrite(array, idx, value)
	BCBuilderInsert(builder, ins, IRType.Prim(IRPrimType.Unit))
end

function BCBuilderArrayRead(builder:BCBuilder, array:ValueRef, idx:ValueRef, type:IRType):ValueRef
	var ins = Instruction.ArrayRead(array, idx)
	BCBuilderInsert(builder, ins, type)
	return ins.value
end

