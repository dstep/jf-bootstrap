import main.compiler
import main.ir
import main.ast
import main.prelude

function IRCompile(context:CompilerContext)
	IRCompileUnits(context, context.units)
end

function IRCompileUnits(context:CompilerContext, units:IRCompilationUnitList)
	var units = context.units
	while true do
		match units
		case Nil 
			return
		case Cons(unit_, tail)
			IRCompileUnit(context, unit_)
			units = tail
		end
	end
end

function IRCompileUnit(context:CompilerContext, unit_:IRCompilationUnit)
	var files = unit_.files
	while true do
		match files
		case Nil
			return
		case Cons(file, tail)
			IRCompileFile(context, file)
			files = tail			
		end
	end
end

adt IRCompiler
	New
	
	field context:CompilerContext
	field file:IRSourceFile
end

function IRCompilerCreate(context:CompilerContext, file:IRSourceFile):IRCompiler
	var compiler = IRCompiler.New
	compiler.context = context
	compiler.file = file
	return compiler
end

function IRCompileFile(context:CompilerContext, file:IRSourceFile)
	var compiler = IRCompilerCreate(context, file)
	
	WriteLn("+++ Running IR Compilation on " + file.file.path + " +++")
	
	IRResolveImports(compiler, file.imports)
	
	IRCompileSymbols(compiler, file.symbols)
	
	WriteLn("--- Leaving " + file.file.path + " ---")
end

function IRCompileSymbols(compiler:IRCompiler, symbols:IRSymbolList)
	while true do
		match symbols
		case Nil return
		case Cons(symbol_, tail)
			IRCompileSymbol(compiler, symbol_)
			symbols = tail
		end
	end
end

function IRCompileSymbol(compiler:IRCompiler, symbol:IRSymbol)
	match symbol
	case Global(global_)
		IRCompileTypeNode(compiler, global_.type)
		IRCompileExprNode(compiler, global_.expr)
	case ADT(adt_)
		IRCompileADT(compiler, adt_)
	case Function(fun)
		IRCompileFunction(compiler, fun)
	case other
		IRCompilerError(compiler, symbol.loc, "symbol not implemented")
	end
end

function IRCompileADT(compiler:IRCompiler, adt_:IRADTDecl)
	IRCompileADTFields(compiler, adt_.fields)
	IRCompileADTConstructors(compiler, adt_.cons)
end

function IRCompileFunction(compiler:IRCompiler, fun:IRFunctionDecl)
	IRCompileParamList(compiler, fun.params)
	IRCompileTypeNode(compiler, fun.retTy)
	
	fun.type = IRType.Function(fun.retTy.type, IRCompileParamListToTypeList(compiler, fun.params))
end

function IRCompileParamListToTypeList(compiler:IRCompiler, params:IRParamList):IRTypeList
	match params
	case Nil return IRTypeList.Nil
	case Cons(param, tail) return IRTypeList.Cons(param.type.type, IRCompileParamListToTypeList(compiler, tail))
	end
end

function IRCompileADTConstructors(compiler:IRCompiler, cons:IRADTConsList)
	while true do
		match cons
		case Nil return
		case Cons(constr, tail)
			cons = tail
			
			IRCompileParamList(compiler, constr.params)
			
			constr.type = IRType.Function(constr.owner.selfType, IRCompileParamListToTypeList(compiler, constr.params)) 
		end
	end
end

function IRCompileParamList(compiler:IRCompiler, params:IRParamList)
	while true do
		match params
		case Nil return
		case Cons(param, tail)
			params = tail
			
			IRCompileTypeNode(compiler, param.type)
		end
	end
end

function IRCompileADTFields(compiler:IRCompiler, fields:IRADTFieldList)
	while true do
		match fields
		case Nil return
		case Cons(field_, tail)
			fields = tail
			
			IRCompileTypeNode(compiler, field_.type)
		end
	end
end

function IRCompileTypeNode(compiler:IRCompiler, type:IRTypeNode)
	if type.resolved then
		return
	end
	type.resolved = true
	type.type = IRCompileType(compiler, type.loc, type.type)
end

function IRCompileType(compiler:IRCompiler, loc:SrcLoc, type:IRType):IRType
	match type
	case Prim
		return type
	case Ref(ref)
		var symbol = IRResolveGlobalSymbol(compiler, ref.loc, ref.id)
		match symbol
		case ADT(decl)
			return decl.selfType
		case other
			IRCompilerError(compiler, ref.loc, "Name doesn't represent a type")
		end
	case ArrayUnsized(elTy)
		return IRType.ArrayUnsized(IRCompileType(compiler, loc, elTy))
	case ArraySized(elTy, sizeExpr)
		IRCompileExprNode(compiler, sizeExpr)
		return IRType.ArraySized(IRCompileType(compiler, loc, elTy), sizeExpr)
	case other
		IRCompilerError(compiler, loc, "type not implemented")
	end
end

function IRCompileExprNode(compiler:IRCompiler, expr:IRExprNode)
end

function IRResolveGlobalSymbol(compiler:IRCompiler, loc:SrcLoc, id:string):IRSymbol
	var symbols = IRFindGlobalSymbol(compiler, id)
	match symbols
	case Nil 
		IRCompilerError(compiler, loc, "Unresolved identifier '" + id + "'")
	case Cons(symbol, tail)
		match tail
		case Cons
			IRCompilerError(compiler, loc, "Identifier '" + id + "' is ambiguous")
		end
		
		return symbol
	end
end

function HasAnySymbol(symbols:IRSymbolList):bool
	match symbols
	case Nil return false
	case Cons return true
	end
end

function ConcatSymbols(l:IRSymbolList, r:IRSymbolList):IRSymbolList
	match l 
	case Nil return r
	case Cons(head, tail)
		return IRSymbolList.Cons(head, ConcatSymbols(tail, r))
	end
end

function IRFindGlobalSymbol(compiler:IRCompiler, id:string):IRSymbolList
	var ownSymbols = IRFindSymbolsInFile(compiler, compiler.file, id)
	if HasAnySymbol(ownSymbols) then
		return ownSymbols
	end
	
	var unit_ = compiler.file.unit_
	var unitSymbols = IRFindSymbolsInUnit(compiler, unit_, id)
	if HasAnySymbol(ownSymbols) then
		return unitSymbols
	end
	
	var allSymbols = IRSymbolList.Nil
	var imports = compiler.file.imports
	while true do
		match imports
		case Nil return allSymbols
		case Cons(import_, tail)
			var newSymbols = IRFindSymbolsInUnit(compiler, import_.resolution, id)
			allSymbols = ConcatSymbols(allSymbols, newSymbols)
			imports = tail
		end
	end
end

function IRFindSymbolsInUnit(compiler:IRCompiler, unit_:IRCompilationUnit, id:string):IRSymbolList
	var found = IRSymbolList.Nil
	var files = unit_.files
	while true do
		match files
		case Nil return found
		case Cons(file, tail)
			files = tail
			found = ConcatSymbols(found, IRFindSymbolsInFile(compiler, file, id))
		end
	end
end

function IRFindSymbolsInFile(compiler:IRCompiler, file:IRSourceFile, id:string):IRSymbolList
	var found = IRSymbolList.Nil
	var symbols = file.symbols
	while true do
		match symbols
		case Nil return found
		case Cons(symbol, tail)
			if symbol.name == id then
				found = IRSymbolList.Cons(symbol, found)
			end
			symbols = tail
		end
	end
end

function IRResolveImports(compiler:IRCompiler, imports:IRImportList)
	while true do
		match imports
		case Nil return
		case Cons(import_, tail)
			IRResolveImport(compiler, import_)
			imports = tail
		end
	end
end

function IRCompilerError(compiler:IRCompiler, loc:SrcLoc, message:string)
	match loc
	case At(line, col)
		WriteLn(compiler.file.file.path + "(line " + IntToStr(line + 1) + ", col " + IntToStr(col + 1) + "): IRCompiler Error: " + message)
	end
	Exit(1)
end

function IRResolveImport(compiler:IRCompiler, import_:IRImport)
	var units = compiler.context.units
	while true do
		match units 
		case Nil
			IRCompilerError(compiler, import_.loc, "Can't resolve import '" + import_.name + "'")
		case Cons(unit_, tail)
			units = tail
			if unit_.name == import_.name then
				import_.resolution = unit_
				return
			end
		end
	end
end

