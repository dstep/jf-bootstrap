adt Foo
	B(b:Bar)
	Q
end

adt Bar
	X
	Y
end

function err(i:i32):undef import "exit"

function foo(f:Foo):i32
	match f
	case B(b)
		match b
		case X
			cc(0)
		case f
			cc(1)
		end
	case other
		return 0
	end
end


function LLVMCodegenType(codegen:LLVMCodegen, loc:SrcLoc, type:IRType):pointer
	match type
	case Ref(ref)
		LLVMCodegenError(codegen, loc, "ref types must not appear in the codegen")
	case Prim(prim)
		match prim
		case Unit return LLVMVoidTypeInContext(llvm)
		case I32 return LLVMInt32TypeInContext(llvm)
		case String llvmStringType
		case Pointer return LLVMPointerType(LLVMInt8TypeInContext(llvm), 0)
		case Bool return LLVMInt1TypeInContext(llvm)
		case other LLVMCodegenError(codegen, loc, "prim type not implemented")
		end
	case ADT(adt_)
		return LLVMPointerType(LLVMCodegenADTDeclOpaque(codegen, adt_), 0)
	case ADTMetaclass(decl)
		LLVMCodegenError(codegen, loc, "meta types must not appear in the codegen")
	case ArrayUnsized(elementType)
		var elTy = LLVMCodegenType(codegen, loc, elementType)
		return LLVMPointerType(elTy, 0)
	case ArraySized(elementType, size)
		LLVMCodegenError(codegen, loc, "sized array type should not appear in a compiled bytecode")
	case other
		LLVMCodegenError(codegen, loc, "type not implemented")
	end
end